Here we Go
The why and how of Go for Cogs
15:04 4 Apr 2018

* What was Go designed for?
[EG]
- Fast compilation
- "Lightweight" static type system
- Powerful static analysis
- Designed for concurrency

.link https://golang.org/doc/faq:What_is_the_purpose_of_the_project


* Why did Cogs choose Go?
[EG]

- We're committed to evolving towards SOA
- We value programmer productivity

* Developer experience
[EG]

* Packages

- foundational visibility mechanism
- a directory of files
- will build a binary if `main.go` exists
- can be imported into other packages, even remotely
- integral to the build system
- crucial aspect of system design

  $ cat ./pkg/somepackage/main.go

  package somepackage

  import 'github.com/taboularasa/gosf/otherpackage'

  func main() {

  }

: foreshadow dataflow
: packages predicate all other visibility aspects in the language
: the public API of a package is defined by exported members, any reference which starts with a capital letter
: all other aspects of the package are private
: all private references can be used freely within a package


* Interfaces
[EG]

Something about Interfaces

* Closures

- functions are first class
- functions can be passed as arguments
- functions close over (keep a reference to) local variables in their lexical scope

.play closure.go

: closure holds reference to local variables that were defined in the same scope as where the function was defined
: many patterns exist that leverage closure
: e.g. functional arguments

* Concurrency
[EG]
: talk about dataflow

Something about Concurrency

* Paradigm

.image paradigm.png

- Go has light/weak support for OO and Functional
- Go works best by applying all paradigms in even proportions
- procedural shell, functional core
: multi paradigm languages typically allow for optional application of some paradigm

: functional:
:   - functions are first class
:   - closures
:   - lack of generics prevent most higher order functions to be implemented effectively
: OO:
:   - instances of structs can have encapsulated state and behavior
:   - code reuse accomplished via composition
:   - lack of inheritance prevents many OO patterns

* Testing
[EG]

Something about Testing

* Resources

- A tour of Go
- Dave Cheeney
- Just for func
- Gophercast
- Exercism

* Stitch Fix resources
[EG]

Something about Stitch Fix resources

* Demo the Demo

* Its Go time
