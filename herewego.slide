Here we Go
The why and how of Go for Cogs
15:04 4 Apr 2018

* Go

  Everyone knows that debugging is twice as hard as writing a program in the first place.
  So if you're as clever as you can be when you write it, how will you ever debug it?
  - Brian Kernighan

* Why Go?

- Go has characteristics favorable to developing microservices
- Go scales well with team size

* Microservice Development

- Performance matters. We need to maintain consistent performance while incorporating more services
- Go's std lib provides robust networking capabilities
- Built in concurrency simplifies working with networked systems

: Damien is a great example.  We used concurrency to fan out requests to other services,
:   and aggregate the results upon completion.
: You are already using concurrency! Every request is run in a goroutine
: This helps integrate with systems like RabbitMQ. One process can handle
:   multiple concurrent consumers running at different rates

* Maintainability

*Static* *Typing*

- Aids discoverability (no grepping required)
- The compiler can catch an entire category of errors
- Static analysis enables tooling to aid development

*Code* # need a better name for this

- Go favors readable code over concise code
- Idiomatic Go code should be not be surprising. No/few globals, initialization of app state occurs during startup and is required.

  Indeed, the ratio of time spent reading versus writing is well over 10 to 1.
  We are constantly reading old code as part of the effort to write new code.
  Therefore, making it easy to read makes it easier to write.

  â€• Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship

: Recognize that static typing comes with a cost. With Go, the cost is lower than in some other languages
:  but is still there. Over time, we expect this to pay off due to the outlined benefits
: We have changed our thinking from startup mode, to maintainable solutions
: As David says, "Go pays in cash, ruby with credit"
: Mention blog post at end of deck (diagram of development velocity)
: determing structure at runtime is a liability. It makes it impossible to reason about
: the behavior through static analysis. The system could be consider non-deterministic
: It must be inspected at runtime. This is why we need tools like pry for debugging

* Maintainability Continued...

.image compiling.png

- The language made feature tradeoffs to ensure fast builds
- I just wanted a slide for this comic

* Go in Practice

.image in-practice.gif

* Getting Started with Go

What do I need to know to make getting started in Go a pleasant experience?

- Don't fight Go Conventions (GOPATH, formatting, testing ...)
- Don't overuse concurrency
- Go does NOT support inheritance in any form, use composition
- Avoid empty interfaces ( interface{} ), use the type system to your advantage
- Take the time to understand the design of the language (lots of great presentations)

: Not a comprehensive list, just to help get you started

* Packages

  $ cat ./pkg/somepackage/service.go

  package somepackage

  import 'github.com/taboularasa/gosf/otherpackage'

  func updateItem() {
    otherpackage.SomePublicFunction()
  }

  func UpdateItems() {
    updateItem()
  }

- a directory of files that all start with the same line `package <NAME OF PACKAGE>`
- only one package name per directory
- foundational visibility mechanism
- cyclic dependencies will not compile
- will build a binary if the package name is `main`

: can be imported into other packages, even remotely
: packages predicate all other visibility aspects in the language
: integral to the build system
: crucial aspect of system design
: the public API of a package is defined by exported members, any reference which starts with a capital letter
: all other aspects of the package are private
: all private references can be used freely within a package
: packages are atomic and can be reused simply by moving them to another location and updating the import reference


* Interfaces

Interfaces are the generic programming mechanism of Go.
They seperate behavior from data (opposite of classes),
and allow functions to operate on behavior.

  // Whitelister checks the provided key against a list of allowed keys,
  // and returns true if the provided key is included.
  type Whitelister interface {
    Includes(key string) bool
  }

  // usage in a function declaration
  func authorize(r http.Request, w Whitelister) error {

  // authorize a request
  err := authorize(request, DBWhitelist{db: db})

Authorize will know nothing about the implementation of Whitelister


* Interface Guidelines

- Smaller is better
- Declare interfaces close to where the are used
- Consider the Robustness Principle: Accept an interface, return a struct
- You can compose interfaces from other interfaces
 // ReadCloser is the interface that groups the basic Read and Close methods.
 type ReadCloser interface {
  Reader
  Closer
 }

: Robustness Principle is primarily used as a type guard in a method (only use what you need)
:   like ruby checks to see if the type can do what you expect (does it actually quack?)
: As the an interface gains more users, it should move further away (think io package)

* Closures

- Functions are first class types
- Functions can be passed as arguments
- Functions close over (keep a reference to) local variables in their lexical scope

.play closure.go

: closure holds reference to local variables that were defined in the same scope as where the function was defined
: many patterns exist that leverage closure
: e.g. functional arguments


: TODO - show how to use a type alias
: TODO - show how a type system can be leveraged to ensure correctness (golib auth)
: TODO - show a sealed interface

* Closures (continued)

  type counterFunc func() int

  func counterFactory(start, increment int) counterFunc {
  	counter := start
  	return func() int {
  		counter = counter + increment
  		return counter
  	}
  }

  func main() {
  	countBy10 := counterFactory(0, 10)
  	fmt.Println(countBy10())
  	fmt.Println(countBy10())
  }


* Closure Gotchas

Since closures reference local variables, you need to be watch out for variable reuse
.play -edit closure_gotcha.go /^func main/,/^}/

: Use the example to show that the variable is reused.
: The example is editable. Update the code to show how to fix it

* Receivers

Go's receivers _look_ like instance methods, but are just syntactic sugar over struct helper methods. The syntactic sugar provides namespacing, which improves readability

.play receivers.go /^func main/,/^}/


* Nil Receivers

Since a receiver is just a function that takes a struct, the struct can be nil

.play nil_receiver.go /^type Datastore/,/^}/

: this lets the developer of the receiver create a consistent api (ie the user doesnt have to worry about nils)


* Paradigm

.image paradigm.png

- Go has light/weak support for OO and Functional
- Go works best by applying all paradigms in even proportions
- procedural shell, functional core
: multi paradigm languages typically allow for optional application of some paradigm

: functional:
:   - functions are first class
:   - closures
:   - lack of generics prevent most higher order functions to be implemented effectively
: OO:
:   - instances of structs can have encapsulated state and behavior
:   - code reuse accomplished via composition
:   - lack of inheritance prevents many OO patterns

* Testing

Testing is built into Go. Use the *testing* package to write tests, and *go test* to run them.

- Idiomatic Go tests use either table driven tests or subtests
- We recommend using an assertion package to reduce boilerplate assertion tests
- Go does not exit tests early unless you call *Fatal()*

  testCases := []struct {
    desc   string
    input  []int
    output int
  }{ { desc: "happy path", input: []int {1,2}, output: 3} }
  for _, tc := range testCases {
    assert.Equal(Add(tc.input), tc.output, tc.desc)
  }

* Resources

.link https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html Diminishing returns of static typing
.link https://commandercoriander.net/blog/2018/03/30/go-interfaces/ A Note on Using Go Interfaces Well
.link https://en.wikipedia.org/wiki/Robustness_principle Robustness principle - Wikipedia
.link https://github.com/golang/go/wiki/CommonMistakes Common Go Mistakes
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/ 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs
.link https://blog.heroku.com/neither-self-nor-this-receivers-in-go Neither self nor this: Receivers in Go
.link https://www.youtube.com/watch?v=8hQG7QlcLBk GopherCon 2017: Mitchell Hashimoto - Advanced Testing with Go
.link https://github.com/bahlo/go-styleguide Go Styleguide

* More Resources!

.link https://tour.golang.org/welcome/1 A tour of Go
.link https://gobyexample.com/ Go by Example
.link https://dave.cheney.net/ Dave Cheeney
.link https://www.youtube.com/playlist?list=PL64wiCrrxh4Jisi7OcCJIUpguV_f5jGnZ Just for func
.link https://www.usegolang.com/ Something like Hartl's Rails Tutorial
.link http://exercism.io/languages/go/about Exercism

* Stitch Fix Resources

.link https://github.com/stitchfix/eng-wiki/tree/master/technical-topics/go Go Technical Topics (eng-wiki)

: Go is a bonsai tree
: Much of the tooling depends on project location. Don't fight it until you understand it
: Do not attempt to do Object Oriented Programming
: It has many OO like features, but it is NOT an OO language
: Favor configuration over convention
: Go expects everything to be configured, and the earlier the better.
: Use table driven testing (aka xunit style tests)
: Do not try to write rspec style tests, it will frustrate you to no end.
: Also, unless you call Fatal(), go tests do not exit early.
: You will not have a repl.
: You must learn to reason through your code, add debug statements, test in smaller areas,
: and finally, you can fall back on delv. This is a debugger, not an interpreter.
: provide tool links
: Active record isnt there...
:    -- explain how to deal with it (repo pattern)
: rspec        - use table driven tests
: debugging    - delv
: no exception -
: No inheritance, use composition
: implicit conformance, this reduces the ceremony around type systems
: gives go the feeling of "duck typing"

* Demo the Demo

.link https://github.com/spf13/cobra cobra

implement a unix command
.link https://github.com/ericlagergren/go-coreutils go-coreutils
embed something from exercism
.link http://exercism.io/languages/go/about Exercism
implment a classic algorithm in Go
.link https://golanglibs.com/top?q=golang-algorithms golang-algorithms

: Enumerate on project ideas (unix commands, api integrations, classic algorithms, exercisms projects)
