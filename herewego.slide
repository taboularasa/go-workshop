Here we Go
The why and how of Go for Cogs
15:04 4 Apr 2018

* Go

  Everyone knows that debugging is twice as hard as writing a program in the first place. 
  So if you're as clever as you can be when you write it, how will you ever debug it?
  - Brian Kernighan

* Why Go?

- Go has characteristics favorable to developing microservices
- Go scales well with team size

* Microservice Development

- Performance matters. Cumulative latency is an issue
- Go's std lib provides robust networking capabilities
- Built in concurrency simplifies working with networked systems
: The more services we introduce, the more network hops we need to make
: Use Damien as an example. Even when we add services, the total response time should 
: not increase
: Every request is run in a goroutine. net/http is the defacto http server
: We can easily fan out/in requests to systems.
: With RabbitMQ one process can handle multiple concurrent consumers
: running at different rates

* Maintainability

- Static typing aids discoverability (no grepping required)
- The compiler can catch an entire category of errors
- The language favors explicitness, which aids readability and maintainability
- Static analysis enables tooling to further aid development

  Indeed, the ratio of time spent reading versus writing is well over 10 to 1.
  We are constantly reading old code as part of the effort to write new code. 
  Therefore, making it easy to read makes it easier to write.

  â€• Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship


* Maintainability Continued...


.image compiling.png

- The language made feature tradeoffs to ensure fast builds
- 

: diagram of development velocity (dont name ruby, use "dynamic languages"
: we know its an ask, but long term the type system helps you with a growing code
: we are thinking about tomorrow
: go pays in cash, ruby with the CC
: once you gain fluency, you no longer have the burden
: determing structure at runtime is a liability. It makes it impossible to reason about
: the behavior through static analysis. The system could be consider non-deterministic
: It must be inspected at runtime. This is why we need tools like pry for debugging
: this is important to being able to compiletime checking

* Go in Practice

.image in-practice.gif

* Getting Started with Go

What do I need to know to make getting started in Go a pleasant experience?

- Don't fight Go Conventions (GOPATH, formatting, testing ...)
- Don't overuse concurrency
- Go does NOT support inheritance in any form, use composition
- Avoid empty interfaces ( interface{} ), use the type system to your advantage
- Take the time to understand the design of the language (lots of great presentations)

: not a comprehensive list, just to help get you started

* Packages

- foundational visibility mechanism
- a directory of files.
- Only one package may be named in the files
- will build a binary if the package name is `main`
- can be imported into other packages, even remotely
- integral to the build system
- crucial aspect of system design
- cyclic dependencies are not supported between packages

  $ cat ./pkg/somepackage/service.go

  package somepackage

  import 'github.com/taboularasa/gosf/otherpackage'

  func updateItem() {

  }

: foreshadow dataflow
: packages predicate all other visibility aspects in the language
: the public API of a package is defined by exported members, any reference which starts with a capital letter
: all other aspects of the package are private
: all private references can be used freely within a package
: packages are atomic and can be reused simply by moving them to another location and updating the import reference


* Interfaces

Interfaces are the generic programming mechanism of Go.
They seperate behavior from data (opposite of classes),
and allow functions to operate on behavior.

  // Whitelister checks the provided key against a list of allowed keys,
  // and returns true if the provided key is included.
  type Whitelister interface {
    Includes(key string) bool
  }
 
  // usage in a function declaration
  func authorize(r http.Request, w Whitelister) error {
 
  // authorize a request
  err := authorize(request, DBWhitelist{db: db})

Authorize will know nothing about the implementation of Whitelister


* Interface Guidelines

- Smaller is better
- Declare interfaces close to where the are used
- Consider the Robustness Principle: Accept an interface, return a struct
- You can compose interfaces from other interfaces
 // ReadCloser is the interface that groups the basic Read and Close methods.
 type ReadCloser interface {
  Reader
  Closer
 }

*Links*

.link https://commandercoriander.net/blog/2018/03/30/go-interfaces/
.link https://en.wikipedia.org/wiki/Robustness_principle 

: it is primarily used as a type guard in a method (only use what you need)
: like ruby checks to see if the type can do what you expect (does it actually quack?)
: it is ok to reuse an interface

* Closures

- functions are first class
- functions can be passed as arguments
- functions close over (keep a reference to) local variables in their lexical scope

.play closure.go

: closure holds reference to local variables that were defined in the same scope as where the function was defined
: many patterns exist that leverage closure
: e.g. functional arguments


: TODO - show how to use a type alias
: TODO - show how a type system can be leveraged to ensure correctness (golib auth)
: TODO - show a sealed interface

* Closure Gotchas

.play -edit closure_gotcha.go /^func main/,/^}/


*Links*
.link https://github.com/golang/go/wiki/CommonMistakes
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/

*Concurrency

*Guidelines*
- Don't overuse channels
- Use context.Context for request scoped state

* Receivers


: TODO: this would be a good place to show nil receivers


Something about Concurrency

* Paradigm

.image paradigm.png

- Go has light/weak support for OO and Functional
- Go works best by applying all paradigms in even proportions
- procedural shell, functional core
: multi paradigm languages typically allow for optional application of some paradigm

: functional:
:   - functions are first class
:   - closures
:   - lack of generics prevent most higher order functions to be implemented effectively
: OO:
:   - instances of structs can have encapsulated state and behavior
:   - code reuse accomplished via composition
:   - lack of inheritance prevents many OO patterns

* Testing
[EG]

Something about Testing

* Resources

.link https://tour.golang.org/welcome/1 A tour of Go
.link https://gobyexample.com/ Go by Example
.link https://dave.cheney.net/ Dave Cheeney
.link https://www.youtube.com/playlist?list=PL64wiCrrxh4Jisi7OcCJIUpguV_f5jGnZ Just for func
.link https://www.usegolang.com/ Something like Hartl's Rails Tutorial
.link http://exercism.io/languages/go/about Exercism

* Stitch Fix resources
[EG]

Something about Stitch Fix resources

: Go is a bonsai tree
: Much of the tooling depends on project location. Don't fight it until you understand it
- Do not attempt to do Object Oriented Programming
: It has many OO like features, but it is NOT an OO language
- Favor configuration over convention
: Go expects everything to be configured, and the earlier the better.
- Use table driven testing (aka xunit style tests)
: Do not try to write rspec style tests, it will frustrate you to no end.
: Also, unless you call Fatal(), go tests do not exit early.
- You will not have a repl. 
: You must learn to reason through your code, add debug statements, test in smaller areas,
: and finally, you can fall back on delv. This is a debugger, not an interpreter.
- provide tool links
- Active record isnt there...
    -- explain how to deal with it (repo pattern)
- rspec        - use table driven tests
- debugging    - delv
- no exception - 
- No inheritance, use composition
: implicit conformance, this reduces the ceremony around type systems
: gives go the feeling of "duck typing"

* Demo the Demo

: Enumerate on project ideas (unix commands, api integrations, classic algorithms, exercisms projects)

